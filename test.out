[0m[[0m[0minfo[0m] [0m[0mLoading settings for project eson-scala-old-build from plugins.sbt ...[0m
[0m[[0m[0minfo[0m] [0m[0mLoading project definition from /home/mmior/apps/eson-scala-old/project[0m
[0m[[0m[0minfo[0m] [0m[0mLoading settings for project root from build.sbt ...[0m
[0m[[0m[0minfo[0m] [0m[0mSet current project to eson-scala (in build file:/home/mmior/apps/eson-scala-old/)[0m
('EmpProjects_2_1,Set('EmpName, 'EmpID))
('EmpProjects_1,Set('ProjName, 'ProjID))
('Employees_2,Set('EmpName, 'DeptID, 'EmpID))
('Employees_1,Set('DeptName, 'DeptID))
('EmpProjects_2_2,Set('ProjID, 'EmpID))
========== 'EmpProjects_2_1 ==========
EmpID â†’ EmpName
========== 'EmpProjects_1 ==========
ProjID â†’ ProjName
========== 'Employees_2 ==========
EmpID â†’ EmpName
EmpID â†’ DeptID
========== 'Employees_1 ==========
DeptID â†’ DeptName
========== 'EmpProjects_2_2 ==========
EmpProjects_2_2(EmpID) âŠ† EmpProjects_2_1(â€¦)
EmpProjects_2_1(EmpID, EmpName) âŠ† Employees_2(â€¦)
EmpProjects_1(ProjID) âŠ† EmpProjects_1(â€¦)
EmpProjects_2_1(EmpName, EmpID) âŠ† Employees_2(â€¦)
EmpProjects_2_1(EmpID) âŠ† EmpProjects_2_2(â€¦)
Employees_2(DeptID) âŠ† Employees_1(â€¦)
Employees_1(DeptID) âŠ† Employees_1(â€¦)
EmpProjects_2_1(EmpID) âŠ† Employees_2(â€¦)
EmpProjects_2_2(ProjID) âŠ† EmpProjects_2_2(â€¦)
EmpProjects_1(ProjID) âŠ† EmpProjects_2_2(â€¦)
EmpProjects_2_1(EmpName) âŠ† Employees_2(â€¦)
EmpProjects_2_1(EmpID) âŠ† EmpProjects_2_1(â€¦)
EmpProjects_2_2(EmpID) âŠ† Employees_2(â€¦)
Employees_1(DeptID) âŠ† Employees_2(â€¦)
EmpProjects_2_2(EmpID) âŠ† EmpProjects_2_2(â€¦)
('EmpProjects_2_1,Set('EmpName, 'EmpID))
('EmpProjects_1,Set('ProjName, 'ProjID))
('Employees_2,Set('EmpName, 'DeptID, 'EmpID))
('Employees_1,Set('DeptName, 'DeptID))
('EmpProjects_2_2,Set('ProjID, 'EmpID))
EmpProjects_2_2(EmpID) âŠ† EmpProjects_2_1(â€¦)
EmpProjects_2_1(EmpID, EmpName) âŠ† Employees_2(â€¦)
EmpProjects_1(ProjID) âŠ† EmpProjects_1(â€¦)
EmpProjects_2_1(EmpName, EmpID) âŠ† Employees_2(â€¦)
EmpProjects_2_1(EmpID) âŠ† EmpProjects_2_2(â€¦)
Employees_2(DeptID) âŠ† Employees_1(â€¦)
Employees_1(DeptID) âŠ† Employees_1(â€¦)
EmpProjects_2_1(EmpID) âŠ† Employees_2(â€¦)
EmpProjects_2_2(ProjID) âŠ† EmpProjects_2_2(â€¦)
EmpProjects_1(ProjID) âŠ† EmpProjects_2_2(â€¦)
EmpProjects_2_1(EmpName) âŠ† Employees_2(â€¦)
EmpProjects_2_1(EmpID) âŠ† EmpProjects_2_1(â€¦)
EmpProjects_2_2(EmpID) âŠ† Employees_2(â€¦)
Employees_1(DeptID) âŠ† Employees_2(â€¦)
EmpProjects_2_2(EmpID) âŠ† EmpProjects_2_2(â€¦)
========== 'EmpProjects_2_1 ==========
EmpID â†’ EmpName
========== 'EmpProjects_1 ==========
ProjID â†’ ProjName
========== 'Employees_2 ==========
EmpID â†’ EmpName
EmpID â†’ DeptID
========== 'Employees_1 ==========
DeptID â†’ DeptName
========== 'EmpProjects_2_2 ==========
[0m[[0m[0minfo[0m] [0m[0m[32mFunctionalDependencySetSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32madding b â†’ c to a â†’ b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should infer a â†’ c[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mthe set with b â†’ c[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should contain ab â†’ c[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32madding b â†’ d to {ad â†’ c, c â†’ e}[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should contain ab â†’ c and ab â†’ e[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mFunctionalDependencySpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32ma â†’ a[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be trivial[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mab â†’ a[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be trivial[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32ma â†’ b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should not be trivial[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32ma â†’ b[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should convert to a string[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mInclusionDependencySetSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32madding R(AB) âŠ† S(CD)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should also add R(A) âŠ† S(C)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32madding R(A) âŠ† S(B) and S(B) âŠ† T(C)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should also add R(A) âŠ† T(C)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mSchemaSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mgetting INDs for R and T in R(A) âŠ† S(B) and S(B) âŠ† T(C)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should remove anything with T[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32ma complete example[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mgetting INDs for R in R(A) âŠ† S(B) and S(B) âŠ† T(C)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should only have the IND for R[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should decompose correctly[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mInclusionDependencySpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mR(A) âŠ† S(B)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should reverse to S(B) âŠ† R(A)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mR(A) âŠ† S(B)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should convert to a string[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mR(A, B) âŠ† S(A, B)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should convert to a string[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 459 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 15[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 5, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 15, failed 0, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAll tests passed.[0m[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed Feb 19, 2019, 4:06:52 PM[0m
